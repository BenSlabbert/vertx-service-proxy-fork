/*\n
* Copyright 2014 Red Hat, Inc.\n
*\n
* Red Hat licenses this file to you under the Apache License, version 2.0\n
* (the "License"); you may not use this file except in compliance with the\n
* License. You may obtain a copy of the License at:\n
*\n
* http://www.apache.org/licenses/LICENSE-2.0\n
*\n
* Unless required by applicable law or agreed to in writing, software\n
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n
* License for the specific language governing permissions and limitations\n
* under the License.\n
*/\n\n
package @{ifacePackageName.replace('io.vertx.ext', 'io.vertx.ext.proxy')};\n
\n
import @{ifaceFQCN};\n
import io.vertx.core.Handler;\n
import io.vertx.core.eventbus.Message;\n
@foreach{importedType:importedTypes}
	@if{!importedType.packageName.equals("java.lang")}
		import @{importedType};\n
	@end{}
@end{}
\n
/*\n
  Generated Proxy code - DO NOT EDIT\n
*/\n
public class @{ifaceSimpleName}Handler implements Handler<Message<JsonObject>> {\n
\n
  private Vertx vertx;\n
  private TestService service;\n
\n
  public @{ifaceSimpleName}Handler(Vertx vertx, TestService service) {\n
    this.vertx = vertx;\n
    this.service = service;\n
  }\n
\n
  public void handle(Message<JsonObject> msg) {\n
    JsonObject json = msg.body();\n
    String action = msg.headers().get("action");\n
    if (action == null) {\n
      throw new IllegalStateException("action not specified");\n
    }\n
    switch (action) {\n
@foreach{method:methods}
	@if{!method.staticMethod}
      case "@{method.name}": {\n
        service.@{method.name}(
		@code{lastParam = method.params.get(method.params.size() - 1)}
		@code{hasResultHandler=(lastParam.type.kind == CLASS_HANDLER) && (lastParam.type.args[0].kind == CLASS_ASYNC_RESULT)}
		@code{count=0}
		@foreach{param: method.params}
			@if{!hasResultHandler || (count++ != method.params.size() - 1)}
json.getValue("@{param.name}")
			@else{}
createHandler(msg)
			@end{}
		@end{", "});\n
      }
	@end{}
\n
@end{}
      default: {\n
        throw new IllegalStateException("Invalid action: " + action);\n
      }\n
    }\n

  }\n

  private <T> Handler<AsyncResult<T>> createHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        msg.fail(123, res.cause().getMessage());\n
      } else {\n
        msg.reply(res.result());\n
      }\n
    };\n
  }\n
}

